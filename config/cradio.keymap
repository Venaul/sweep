#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        gaming {
            bindings = <&tog 3>;
            key-positions = <5 7 9 0 2 4>;
            require-prior-idle-ms = <1000>;
        };

        soft-off {
            bindings = <&soft_off>;
            key-positions = <10 12 14>;
            require-prior-idle-ms = <1000>;
            layers = <5>;
        };
    };

    behaviors {
        leftshiftz: leftshiftz {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFTSHIFTZ";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33>;
            hold-trigger-on-release;
        };

        rightshiftqm: rightshiftqm {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHTSHIFTQM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        typing {
            bindings = <
&kp Q                     &kp W  &kp F  &kp P  &kp G          &kp J        &kp L                   &kp U      &kp Y    &kp SQT
&kp A                     &kp R  &kp S  &kp T  &kp D          &kp H        &kp N                   &kp E      &kp I    &kp O
&leftshiftz LEFT_SHIFT Z  &kp X  &kp C  &kp V  &kp B          &kp K        &kp M                   &kp COMMA  &kp DOT  &rightshiftqm RIGHT_SHIFT FSLH
                                        &none  &lt 1 SPACE    &lt 2 ENTER  &mt LC(BSPC) BACKSPACE
            >;
        };

        layer_1 {
            bindings = <
&kp N1      &kp N2          &kp N3          &kp N4           &kp N5           &kp N6             &kp N7  &kp N8  &kp N9  &kp N0
&kp ESCAPE  &kp LEFT_ARROW  &kp UP          &kp RIGHT_ARROW  &kp LG(LS(S))    &kp C_VOLUME_UP    &kp N4  &kp N5  &kp N6  &kp SEMICOLON
&kp TAB     &kp LG(TAB)     &kp DOWN_ARROW  &kp C_PREVIOUS   &kp C_NEXT       &kp C_VOLUME_DOWN  &kp N1  &kp N2  &kp N3  &kp PERIOD
                                            &lt 5 C_PLAY     &trans           &kp LEFT_SHIFT     &kp N0
            >;
        };

        layer_2 {
            bindings = <
&kp F1   &kp F2  &kp F3  &kp F4  &kp F5    &kp F6     &kp F7          &kp F8            &kp F9             &kp F10
&kp TAB  &trans  &trans  &trans  &trans    &kp PLUS   &kp MINUS       &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &trans
&trans   &trans  &trans  &trans  &trans    &kp EQUAL  &kp UNDERSCORE  &kp LEFT_BRACE    &kp RIGHT_BRACE    &trans
                         &trans  &trans    &trans     &trans
            >;
        };

        gaming {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E    &kp R        &trans  &trans  &trans  &trans  &trans
&kp LSHFT  &kp A  &kp S  &kp D    &kp F        &trans  &trans  &trans  &trans  &trans
&kp LCTRL  &kp Z  &kp X  &kp C    &kp V        &trans  &trans  &trans  &trans  &trans
                         &lt 4 M  &kp SPACE    &trans  &trans
            >;
        };

        gaming-mod {
            bindings = <
&kp ESC  &kp N1  &kp N2  &kp N3  &kp N4    &trans  &trans  &trans  &trans  &trans
&trans   &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans   &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                         &trans  &trans    &trans  &trans
            >;
        };

        Settings {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR    &trans  &trans  &trans  &trans  &trans
&trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans
&trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans
                                          &trans        &trans        &trans  &trans
            >;
        };
    };
};
